时间复杂度
一个算法中的语句执行次数称为语句频度或时间频度,记为T(n)。
若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。
记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。
大O符号里隐藏着一个常数C
按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)
时间复杂度求法转化为时间频度转化为语句频度，因为计算机里一条语句执行的时间基本上可以默认相等。

https://segmentfault.com/a/1190000000574348
1. 归并排序，快速排序和堆排序
2. 傅立叶变换与快速傅立叶变换
3. 迪杰斯特拉（Dijkstra）算法
4. RSA算法
5. 安全哈希算法
6. 整数因式分解
7. 链接分析
8. 比例积分微分（PID）算法
9. 数据压缩算法
10. 随机数生成
https://yanqiangmiffy.github.io/2017/07/26/Python28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BD%BF%E7%94%A8Python%E5%92%8CR%E4%BB%A3%E7%A0%81%EF%BC%89/
深度学习https://segmentfault.com/a/1190000011044305
https://segmentfault.com/a/1190000009123950