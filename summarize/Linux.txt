 命令
grep 搜索
ps -ef | grep java表示查看所有进程里 CMD 是 java 的进程信息
e显示所有进程,环境变量
f全格式
ps -aux | grep显示所有状态(a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分)
netstat -ap|grep 8090查看端口被占用的进程
lsof -i:端口号或netstat -tunlp|grep 端口号
jobs -l查看当前终端生效的后台进程(-l：显示进程号； -p：仅任务对应的显示进程号； -n：显示任务状态的变化； -r：仅输出运行状态（running）的任务； -s：仅输出停止状态（stoped）的任务)
fg %n让编号n（非pid）进程调至前台
bg %n将后台任务唤醒,在后台运行
ctrl + z 可以将一个正在前台执行的命令放到后台，并且暂停
编码及locale
locale
vi /etc/sysconfig/i18n(zh_CN.UTF-8,en_US.UTF-8)
mv -f(mv dir不移动dir,mv dir/移动dir)
rm -rf


kill -9 [PID]
9表示强迫进程立即停止
批量杀死ps -ef|grep firefox|grep -v grep|awk '{print "kill -9 " $2}' |sh

linux常用下载命令wget,curl(不支持多线程，但可同时下多个文件)，axel(支持多线程)
ls | wc -w查看当前目录下文件及文件夹数（-l）
ls | wc -c(查看当前目录及子目录字节数)
ls -lha(l以列表详细信息显示，a-all,h-human-readable)
wc -[c字节数或--bytes|l行数|w单词数|m字符数或--chars]
ls -l|grep "^d"|wc -l当前目录下目录数
ls -lR|grep "^-"|wc -l当前目录下及子目录下文件数

Linux权限
groupadd name
useradd -g groupname usernaem
chgrp root ./abc.py  # 改变当前目录所属组为root
chown R root ./abc.py  # 改变当前目录及下所有文件和目录所属组为root
chmod
-rwxrw-r--. 1 root root 1314 Feb 2 09:39 abc.py
-文件，d目录，l链接
rwx读写执行，r4w2x1
1连接的文件数，正常文件为1，目录为目录下文件数
root用户
root组
1314大小字节，ls -lh显示为k,m
Feb 2 09:39 最后修改时间
示例
chmod u=rwx，g=5，o=rx abc.py  # o为其它组里的用户
chmod a+r abc.py  # 给所有用户添加读权限

free -m查看内存
cat /proc/version系统详情
uname -a系统用户
uname -r系统内核
内存解释：https://www.cnblogs.com/sunny3096/p/7474594.html
buffer缓冲(A buffer is something that has yet to be "written" to disk)
cache缓存(A cache is something that has been "read" from the disk and stored for later use)
                                      total         used        free      shared       buffers       cached
Mem:                                 255268       238332       16936           0         85540       126384
-/+ buffers/cache:                                 26408      228860
Swap:                                265000            0      265000
total1 = used1 + free1
total1 = used2 + free2
used1  = buffers1 + cached1 + used2
free2  = buffers1 + cached1 + free1
total1从OS系统角度看，total2从应用程序角度看

/dev/null 表示空设备文件
0 表示stdin标准输入
1 表示stdout标准输出
2 表示stderr标准错误
command 1>a 2>&1与command 1>a 2>a还是有区别的，区别就在于前者只打开一次文件a，后者会打开文件两次，并导致stdout被stderr覆盖。
cat用于创建，合并，查看整个文件
<<EOF以EOF作为标准输入结束符(可另行指定)
cat>a<<EOF创建a文件以标准输入写入内容以EOF结束
cat>>a<<EOF向a文件追回内容或（cat<<EOF>>a）
nohup用途：不挂断地运行命令。 &用途：在后台运行 nohup Command [ Arg … ] [　& ]
如果直接点击关闭终端的按钮，断掉的session会通知nohup一起关闭，保持程序一直后台运行可用exit退出

shutdown -h关机，now（立刻），+5（5分钟后），10：30（十点半关机）
shutdown -c取消关机
windows下
shutdown -s关机，-t 00（立刻），-t 60（1分钟后），
at 10:30 shutdown -s（十点半关机）
shutdown -a取消关机

nohup(https://www.cnblogs.com/MYSQLZOUQI/p/5283761.html)
nohup忽略sighup信号(一个kill信号，编号为1)，Terminal关闭时就发送了这个信号给sar
一般linux作为服务器，很少出现挂起情况，这样一来nohup对挂起无效，仅仅直到输出流的作用
&无标准输出,nohup无标准输入，通常结合使用
前台进程：阻塞shell进程，可以用户交互
后台进程：不阻塞shell进程，无法与用户交互(守护进程是特殊的后台进程)
前台运行时不要按ctrl+c

休眠：将内存中的数据保存于硬盘中，所有设备都停止工作
挂起(待机):将当前处于运行状态的数据保存在内存中，机器只对内存供电，而硬盘、屏幕和CPU等部件则停止供电

开启端口
方法一/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT
/etc/init.d/iptables save
service iptables restart 
方法二vi /etc/sysconfig/iptables
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
关闭端口
方法一/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP
/etc/init.d/iptables save
service iptables restart
方法二vi /etc/sysconfig/iptables
A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP
仅允许固定ip访问某个端口
-A INPUT -s 111.111.111.111/32 -p tcp -m tcp --dport 80 -j ACCEPT

head -n 2 filename(显示文件前两行)
tail -n -3 filename(显示文件后三行，+3第三行至最后一行)
sed -n "2,3p" filename(显示文件2至3行)
awk https://www.cnblogs.com/emanlee/p/3327576.html


repo
http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-4.8.1/
https://people.centos.org/hughesjr/chromium/

查看物理cpu个数：cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l
查看逻辑cpu个数：cat /proc/cpuinfo | grep "processor" | wc -l
查看物理cpu核数：cat /proc/cpuinfo | grep "cpu cores"
查看物理cpu中逻辑cpu个数：cat /proc/cpuinfo | grep "siblings"
逻辑cpu个数=物理cpu个数*物理cpu核数*物理cpu中逻辑cpu个数
更新gcc

awk
grep 'abc' | awk '{print $0$1$2$3$4$5$6}'
awk '/print/{print $0}' filename  匹配时始末用/

操作系统史：http://muchong.com/html/200603/213109.html