http://www.runoob.com/nodejs/nodejs-buffer.html
2009年，基于JavaScript语言和Google的V8引擎的开源Web服务器项目Node.js由Ryan推出.
Node.js是运行在服务器端的JavaScript程序运行环境。
事件驱动模型：用事件去驱动(触发)程序的发生
事件驱动模型触发程序处理内容的方式有：
1.自行绑定监听器，编写处理代码；
2.通过已有的监听器，直接在回调函数内编写处理代码。
http://www.cnblogs.com/fanzhidongyzby/p/4098546.html

同步阻塞IO（Blocking IO）
同步非阻塞IO（Non-blocking IO）
IO多路复用（IO Multiplexing）有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型,经典的Reactor设计模式
异步IO（Asynchronous IO）有时也称为异步非阻塞IO，经典的Proactor设计模式
同步和异步的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。（用户线程是否可以干其它事情，行为方式）
阻塞和非阻塞的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。（用户线程是否被内核阻塞，状态） 
IO：https://segmentfault.com/a/1190000007692223
IO为主存储器即内存与外部设备(包括磁盘、网络、网卡、外部存储设备)间输入输出
程序(通常用户应用)与程序(系统内核)间通信(数据流传输)经过网络IO来实现
https://www.zhihu.com/question/19732473
新理解(上面为网上多数错误理解，讨论异步时一定先相对于某一方面，对于Linux接口同异步如下)：
阻塞非阻塞都属于同步，区别在于是否立即返回
同步与异步区别于是否可以做其它事情(由于行为决定状态，异步一定处于未挂起状态，因而同步处于挂起状态。)
同步包括blocking, nonblocking，I/O multiplexing(又称事件驱动)，signal-driven I/O
异步包括Linux AIO,Windows IOCP,.NET BeginInvoke/EndInvoke


js调试
http://blog.csdn.net/whchina/article/details/51240898
chrome
点击{}美化，但美化过后无法编辑代码(可以在美化处先择代码在未美化处搜索到，编辑)
debugger:///VM1772为chrome浏览器的虚拟机执行后的脚本。通常都是eval()的代码
在线执行js
https://tool.lu


I/O 密集型与 CPU 密集型进程的比较
I/O 密集型进程所执行的 I/O 操作比执行的处理操作更多。CPU 密集型的进程所执行的处理操作比 I/O 操作更多。Linux 2.6 的调度器实际上更加偏爱 I/O 密集型的进程，因为它们通常会发起一个 I/O 操作，然后进行阻塞，这就意味着其他工作都可以在两者之间有效地交错进行。




		CPU[密集型]

多进程				  阻塞
多线程			  同步
					  非阻塞
		IO[密集型]	
				  异步
				  
				  

https://www.highcharts.com.cn/docs/range-series
https://echarts.baidu.com/examples/index.html
https://cdnjs.com/libraries/echarts
// 引入Echarts
import Echarts from 'echarts' 
Vue.prototype.echarts = Echarts 
Vue.use(Echarts)
this.echarts.init(document.getElementById('echarts'))
